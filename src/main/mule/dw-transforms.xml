<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/current/mule-ftp.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<flow name="testJoinAirportDetailsToFlights" doc:id="a93e7779-6cce-47e7-9d08-724fdbc20a0d" >
		<http:listener doc:name="HTTP: /join" doc:id="6fcde5ad-7414-4018-a317-447bda267f42" config-ref="HTTP_Listener_config" path="/join"/>
		<set-payload value='#[output application/json
--- 
readUrl( "classpath://examples/allFlightsToLAX.json", "application/json")]' doc:name="Mocked flightsAllAirlines results" doc:id="5e72fe29-b88a-4c4f-a84d-7656b9a69b57" />
		<flow-ref doc:name="joinAirportDetailsToFlights" doc:id="9f51c096-e3d1-49f5-a273-20e3397656ba" name="joinAirportDetailsToFlights"/>
	</flow>
	<flow name="joinAirportDetailsToFlights" doc:id="3a168865-95f3-4de7-88fc-2c23cae436cf">
		<ee:transform doc:name="Transform Message" doc:id="79adcc75-3db2-465e-8438-34626f3e0f41">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var airportDetails = readUrl("classpath://airportInfoTiny.csv", "application/csv") groupBy $."IATA"


fun flightsJoinedWithAirportInfo(payload) =
payload.flights map (element, index) -> 
{
	(element ++ 
	{
		airportInfo: {(airportDetails[element.destination])} //airportDetails[element.destination][0]
		//- "openFlightsAirportId"
		//-- ["openFlightsAirportId", "type", "source", "DST"]
		-- keysToRemove
	})
}


fun listKeys(object: Object) =
	object pluck ((value, key, index) -> 
		key
	)


var keysToRemove = [
  "openFlightsAirportId",
  "type",
  "source"
]

fun joinAirportDetails(flight, key) =
(upper(key)): (
	{airportCode: flight.destination} 
	++ 
	(
		filterDetailsKeys(
		airportDetails[flight.destination][0], keysToRemove)
	)
)


fun flightsJoinedWithAirportInfo2(payload) =
payload.flights map (element, index) -> 
"flight$(index)":
element mapObject ((value, key, index) -> 
//	{
//		(upper(key)): value
//	}
	key match {
		case "destination" -> joinAirportDetails(element, key)
		else -> {(key): value}
	}
)


fun filterDetailsKeys(object, keysArray) = 
object mapObject ((value, key, index) -> 
	if (keysArray contains key as String) {}
	else (key): value
)

fun toXml(anInput, rootKey) =
anInput map (flight) -> valuesOf(flight)[0]

---
//payload
//{
//	(airportDetails["SFO"])
//}
//flightsJoinedWithAirportInfo(payload)
//listKeys(airportDetails["SFO"][0])
flightsJoinedWithAirportInfo2(payload)
toXml "flight"]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="b21c73b5-a0f1-4e3d-a256-99b58a8d6dcc" message="payload"/>
	</flow>
	<flow name="flattenSampleScatterGatherResults">
		<ee:transform doc:name="Transform Message" doc:id="83bf8e0e-b943-4bca-bf23-5f089c1ff298">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java

/*This variable emulates the same payload result from the
 * getFlightsAllAirlines flow's Flatten response arrays Transform Message component. 
 * This is the same payload the results from the Scatter-Gather component 
 * in Development Fundamentals course solutions, and this code here is a copy of the 
 * DataWeave code used in the getFlightsAllAirlines flow.  
*/
var payload = readUrl("classpath://examples/scatterGatherResult.json")


//flatten (payload..payload) orderBy $.price

//Note: This is equivalent to the flatten operation
/*
(payload..payload ) reduce ( (airlineFlights, acc=[]) ->
	// acc ++ airlineFlights
	acc ++ airlineFlights as Array
)
*/
---
flights: ( 
	flatten(payload..flights) //orderBy $.price
)
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="calculateKPIs" doc:id="15564a6f-d5f0-4d31-8848-40011f3b3918" >
		<ee:transform doc:name="compute delta KPIs" doc:id="52a80ed2-edb8-498f-b4c3-62f88b2d5d8e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml

---
payload]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="deltaKPIs" ><![CDATA[%dw 2.0
output application/json

var formattedReservations = readUrl("classpath://examples/formattedReservations.xml", "application/xml")

var joinedFlights = formattedReservations..*flight

fun deltaFlightsKpis(flightsInput : Array<Object> ) = flightsInput
---
deltaFlightsKpis( joinedFlights as Array<Object> )
]]></ee:set-variable>
				<ee:set-variable variableName="flightKPIs" ><![CDATA[%dw 2.0
output application/java
---
{
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
	</flow>
	<flow name="mapObject" doc:id="bac6b614-29e8-4599-bcbb-6b1a6ed22b73" >
		<ee:transform doc:name="Transform Message" doc:id="fc8b9afc-230f-4fd4-9d93-befe0156f10e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var airportDetails = readUrl("classpath://airportInfoTiny.csv", "application/csv") groupBy $."IATA"


fun flightsJoinedWithAirportInfo(payload) =
payload.flights map (element, index) -> 
element


fun listKeys(object: Object) =
	object pluck ((value, key, index) -> 
		key
	)


var keysToRemove = [
  "openFlightsAirportId",
  "type",
  "source"
]


---
//payload
//{
//	(airportDetails["SFO"])
//}
flightsJoinedWithAirportInfo(payload)
//listKeys(airportDetails["SFO"][0])


			

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="1fc73622-a501-4d46-a70e-9a2299b753f0" message="payload" />
	</flow>
	<flow name="joining" doc:id="605e7769-60aa-47a9-b736-b0d39d058f87" >
		<ee:transform doc:name="Transform Message" doc:id="c5441c57-9616-4ff6-aeb0-6133011f1ff9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw

var passengerRecords = readUrl("classpath://passengerRecords.csv", "application/csv")

var flightsWithDetails = payload

var joinedPassengersAndFlights =
dw::core::Arrays::join(
	passengerRecords as Array<Object>,
	flightsWithDetails..*flight as Array<Object>,
	(passengerElement) -> passengerElement."Flight Code",
	(flightElement) -> flightElement.flightCode
)

fun combineJOinedResults(joinResult) =
joinResult map ((item, index) -> 
	{
		(item.l - "Flight Code"),
		(flight @(code: item.r.flightCode): item.r - "flightCode")
	}
)

---
// flights code example A134DS
//passengerRecords
//flightsWithDetails..*flight
combineJOinedResults(joinedPassengersAndFlights)

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="masking-updating-recursive" doc:id="8d7964af-0f5f-4cab-830c-a14e69bddcb0" >
		<ee:transform doc:name="Transform Message" doc:id="7d59b68b-ee36-40c8-b9c5-95e4dfc18b4f" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw

var passengerRecords = readUrl("classpath://passengerRecords.csv", "application/csv")

var flightsWithDetails = payload

var joinedPassengersAndFlights =
dw::core::Arrays::join(
	passengerRecords as Array<Object>,
	flightsWithDetails..*flight as Array<Object>,
	(passengerElement) -> passengerElement."Flight Code",
	(flightElement) -> flightElement.flightCode
)

fun combineJOinedResults(joinResult) =
joinResult map ((item, index) -> 
	{
		(item.l - "Flight Code"),
		(flight @(code: item.r.flightCode): item.r - "flightCode")
	}
)

---
// flights code example A134DS
//passengerRecords
//flightsWithDetails..*flight
combineJOinedResults(joinedPassengersAndFlights)

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="4464240f-1234-425f-b551-26f8a4f85267" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml

var reservationsXml = readUrl("classpath://examples/reservations.xml", "application/xml")

var updateReservations = readUrl("classpath://examples/updatedReservations.xml", "application/xml")

fun formatDataStructure(anyInput: Any) =
	anyInput match {
		case is Array -> anyInput map formatDataStructure($)
		case is Object -> anyInput mapObject (value, key) -> 
			(upper(key)): formatDataStructure(value)
		case is String -> lower(anyInput)
		case is Number -> anyInput
		else -> anyInput
	}

---
//reservationsXml
//update {
//	case flight at .reservations.*reservation.*flight -> flight - "flightCode"
//}
//update {
//	case long at .reservations.*reservation.*flight.*destination.*longitude 
//	-> long as Number as String {format: "###.###"}
//	case lat at .reservations.*reservation.*flight.*destination.*latitude 
//	-> lat as Number as String {format: "###.###"}
//	//case dest at .reservations.*reservation.*flight.*destination -> dest
//}
//update {
//	case dest at .reservations.*reservation.*flight.*destination -> dest - "ICAO"
//}
//dw::util::Values::mask "passengerPhoneNumber" with "+** (***) ***-***"

formatDataStructure(updateReservations)
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	

</mule>
